import numpy as np
import pandas as pd

from backdoor_attacks import create_random_trigger_specified_size
from classifiers import create_nn
from utils_backdoor import run_cv_trigger_size_known

malware_df = pd.read_csv('csv_files/malware.csv', index_col='SHA256')
non_malware_df = pd.read_csv('csv_files/non_malware.csv', index_col='SHA256')
malware_df['is_malware'] = 1
non_malware_df['is_malware'] = 0
df = np.concatenate([malware_df, non_malware_df]).astype('uint8')
del malware_df, non_malware_df
target_class = 0
n_clients = 100
n_rounds = 10
y = df[:, -1]
X = df[:, :-1]

if __name__ == '__main__':
    for trigger_size in range(1, 10):
        for triggered_samples_ration in map(lambda step: step / 100, range(1, 50, 5)):
            classifiers = [
                (create_nn, {'input_shape': X.shape[1]}, 'Neural Network')
            ]
            for n_malicious_clients in range(1, 100):
                n_features = X.shape[1]
                results = [result for clf, params, name in classifiers for result in
                           run_cv_trigger_size_known(clf, params, name, create_random_trigger_specified_size, trigger_size,
                                                     triggered_samples_ration, n_clients, n_rounds,
                                                     n_malicious_clients,
                                                     target_class)]

                for classifier in tuple(classifiers):
                    if all(map(lambda result: result['ASR'] == 1,
                               filter(lambda result: result['Method'] == classifier, results))):
                        classifiers.remove(classifier)
                if not classifiers:
                    break

                results_df = pd.DataFrame(results)
                results_df.to_csv(f'{trigger_size}X{triggered_samples_ration}_{n_malicious_clients}_clients_results.csv'
                                  , mode='w')
