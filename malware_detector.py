import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

from backdoor_attacks import create_random_trigger_specified_size, create_genetic_trigger
from classifiers import create_nn
from utils_backdoor import run_cv
from utils_backdoor import run_cv_trigger_size_known, fit_model, get_model_weights

malware_df = pd.read_csv('csv_files/malware.csv', index_col='SHA256')
non_malware_df = pd.read_csv('csv_files/non_malware.csv', index_col='SHA256')
malware_df['is_malware'] = 1
non_malware_df['is_malware'] = 0
df = np.concatenate([malware_df, non_malware_df]).astype('uint8')
del malware_df, non_malware_df
triggered_samples_ration = 0.05
target_class = 0
trigger_size = 10
n_clients, n_rounds = 10, 10
y = df[:, -1]
X = df[:, :-1]

classifiers = [
    (RandomForestClassifier, {'n_estimators': 100, 'max_depth': 2}, 'Random Forest'),
    (SVC, {'kernel': 'linear', 'C': 1.0}, 'SVM'),
    (create_nn, {'input_shape': X.shape[1]}, 'Neural Network'),
]

if __name__ == '__main__':
    for attack_type in (
            'random_specific_size',
            'function_from_article',
            'no_attack',
    ):
        if attack_type == 'random_specific_size':
            n_features = X.shape[1]
            trigger = create_random_trigger_specified_size(n_features, trigger_size)
            results = [result for clf, params, name in classifiers for result in
                       run_cv_trigger_size_known(X, y, clf, params, name, trigger, trigger_size,
                                                 triggered_samples_ration, n_clients, n_rounds, target_class)]
        elif attack_type == 'function_from_article':
            results = []
            for clf, params, name in classifiers:
                retrain_model = lambda training_set: get_model_weights(
                    fit_model(training_set[0], training_set[1], clf, params, name))
                trigger = create_genetic_trigger(trigger_size, (X, y,), retrain_model)
                trigger = tuple(map(lambda elem: elem if elem else None, trigger))
                results += [result for result in
                            run_cv_trigger_size_known(X, y, clf, params, name, trigger, trigger_size,
                                                      triggered_samples_ration, n_clients, n_rounds,  target_class)]
        else:
            results = [result for clf, params, name in classifiers for result in run_cv(X, y, clf, params, name)]
        results_df = pd.DataFrame(results)
        results_df.to_csv(f'{attack_type}_results.csv', mode='w')
