import numpy as np
import pandas as pd

from backdoor_attacks import create_random_trigger_specified_size, create_genetic_trigger
from utils_backdoor import run_cv_trigger_size_known, fit_model, get_model_weights

malware_df = pd.read_csv('csv_files/malware.csv', index_col='SHA256')
non_malware_df = pd.read_csv('csv_files/non_malware.csv', index_col='SHA256')
malware_df['is_malware'] = 1
non_malware_df['is_malware'] = 0
df = np.concatenate([malware_df, non_malware_df]).astype('uint8')
del malware_df, non_malware_df
target_class = 0
y = df[:, -1]
X = df[:, :-1]

if __name__ == '__main__':
    for trigger_size in range(1, 20):
        classifiers = [
            'Neural Network',
            'SVM',
            'Random Forest',
        ]
        for triggered_samples_ration in map(lambda step: step / 100, range(1, 20)):
            for attack_type in ('random_specific_size',
                                'function_from_article'):
                if attack_type == 'random_specific_size':
                    n_features = X.shape[1]
                    trigger = create_random_trigger_specified_size(n_features, trigger_size)
                    results = [result for name in classifiers for result in
                               run_cv_trigger_size_known(X, y, name, trigger, trigger_size,
                                                         triggered_samples_ration, target_class)]
                elif attack_type == 'function_from_article':
                    results = []
                    for name in classifiers:
                        retrain_model = lambda training_set: get_model_weights(
                            fit_model(training_set[0], training_set[1], name))
                        trigger = create_genetic_trigger(trigger_size, (X, y,), retrain_model)
                        trigger = tuple(map(lambda elem: elem if elem else None, trigger))
                        results += [result for result in
                                    run_cv_trigger_size_known(X, y, name, trigger, trigger_size,
                                                              triggered_samples_ration, target_class)]
                for classifier in tuple(classifiers):
                    if all(map(lambda result: result['ASR'] == 1, filter(lambda result: result['Method'] == classifier,
                                                                         results))):
                        classifiers.remove(classifier)
                if not classifiers:
                    break

                results_df = pd.DataFrame(results)
                results_df.to_csv(f'{trigger_size}X{triggered_samples_ration}_{attack_type}_results.csv', mode='w')
