import os.path

import pandas as pd

from backdoor_attacks import create_random_trigger_specified_size, create_genetic_trigger
from utils_backdoor import run_cv_random_trigger, run_cv_genetic_trigger

target_class = 0

if __name__ == '__main__':
    for trigger_size in range(1, 11):
        for attack_type in (
                # 'random_specific_size',
                'function_from_article',
        ):
            classifiers = [
                # 'Neural Network',
                # 'SVM',
                'Random Forest',
            ]
            for triggered_samples_ration in map(lambda step: step / 100, range(1, 11)):
                if os.path.exists(f'{trigger_size}X{triggered_samples_ration}_{attack_type}_results.csv'):
                    continue
                if attack_type == 'random_specific_size':
                    results = [result for name in classifiers for result in
                               run_cv_random_trigger(name, create_random_trigger_specified_size, trigger_size,
                                                     triggered_samples_ration, target_class)]
                elif attack_type == 'function_from_article':
                    results = []
                    for name in classifiers:
                        results += [result for result in
                                    run_cv_genetic_trigger(name, create_genetic_trigger, trigger_size,
                                                           triggered_samples_ration, target_class)]
                for classifier in tuple(classifiers):
                    if all(map(lambda result: result['ASR'] == 1, filter(lambda result: result['Method'] == classifier,
                                                                         results))):
                        classifiers.remove(classifier)
                results_df = pd.DataFrame(results)
                results_df.to_csv(f'{trigger_size}X{triggered_samples_ration}_{attack_type}_results.csv', mode='w')
                if not classifiers:
                    break
